{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/anjelica0224/MLPR/blob/main/LDA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rkA32n5-2sNi"
      },
      "source": [
        "### Instructions:\n",
        "* You need to code in this jupyter notebook only.\n",
        "* Download this notebook and import in your jupyter lab.\n",
        "* You need to write a partial code for step 0 to step 8 mentioned with prefix ##\n",
        "* Fill the blanks where it is instructed in comments.\n",
        "* Leave other codes, structure as it is.\n",
        "* Follow all the instructions commented in a cells.\n",
        "\n",
        "\n",
        "\n",
        "**Answer the questions given at the end of this notebook within your report.**\n",
        "\n",
        "**Upload this jupyter notebook after completion with your partial code and the report in one file in PDF format.**\n",
        "\n",
        "**Also upload the resulting image showing all the selected points and boundary line between them after LDA analysis.**\n",
        "\n",
        "**Your file name should be yourname_lab4.pdf. Upload it before the due time.**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uzQLHLr22sNm"
      },
      "outputs": [],
      "source": [
        "import numpy as np## import numpy\n",
        "import cv2 ## import opencv\n",
        "import matplotlib ## import matplotlib\n",
        "import matplotlib.pyplot as plt ## import matplotlib pyplot\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA## from sklearn import LDA analysis\n",
        "matplotlib.use('TkAgg')\n",
        "\n",
        "##---------------------------------------------------\n",
        "## Step 0: Install all other dependencies that occur at run time if  any module not found.\n",
        "##---------------------------------------------------"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xz85jbH92sNn"
      },
      "outputs": [],
      "source": [
        "Number_of_points = 20  ## Number of points you want select from each strip. Recommended >= 20\n",
        "\n",
        "img = cv2.imread(\"Indian_Flag.jpg\") ## Read the given image\n",
        "\n",
        "def select_points(img, title):\n",
        "    fig, ax = plt.subplots()\n",
        "    #------------------------------------------\n",
        "    ## step 1: Convert the img from BGR to RGB using cv2 and display it using cv2.imshow\n",
        "    image_to_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n",
        "    ax.imshow(image_to_rgb)\n",
        "    ## step 2: Put title of the image\n",
        "    ax.set_title(title)\n",
        "    ##-----------------------------------------\n",
        "\n",
        "    # Set the cursor style to a plus sign\n",
        "    fig.canvas.manager.set_window_title('Select Points')\n",
        "    cursor = matplotlib.widgets.Cursor(ax, useblit=True, color='red', linewidth=1)\n",
        "    plt.show(block=False)  # Show the image without blocking\n",
        "\n",
        "    k = 0\n",
        "    points = [] ## Create here an empty list to store points\n",
        "\n",
        "    while k < Number_of_points:\n",
        "        xy = plt.ginput(1, timeout=0)  # Non-blocking input\n",
        "        if len(xy) > 0:\n",
        "            col, row = map(int, xy[0])  # Convert to integer\n",
        "            ##-----------------------------------------------\n",
        "            ## Step 3: Collect RGB values at the clicked positions (col, row) and print it.\n",
        "            rgb_values = image_to_rgb[row, col]\n",
        "            print(f\"Point {k+1}: RGB values at ({col}, {row}): {rgb_values}\")\n",
        "            ##-----------------------------------------------\n",
        "\n",
        "            k += 1\n",
        "            points.append([row, col, img[row, col]])  # Store RGB values in empty list points.\n",
        "\n",
        "            # Display colored dot on the image\n",
        "            plt.scatter(col, row, c='black', marker='o', s=10)\n",
        "\n",
        "            # Redraw the image to include the dot\n",
        "            plt.draw()\n",
        "\n",
        "    plt.close()  # Close the window after all points are collected\n",
        "    return points ## Fill this blank"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9_Q3HIRs2sNo",
        "outputId": "c144ca31-22e8-406a-a20b-d5be2bbc1c07"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Point 1: RGB values at (529, 261): [200 154 118]\n",
            "Point 2: RGB values at (541, 275): [242  87  21]\n",
            "Point 3: RGB values at (543, 290): [251  90  18]\n",
            "Point 4: RGB values at (558, 282): [241  87  17]\n",
            "Point 5: RGB values at (584, 285): [248  87  17]\n",
            "Point 6: RGB values at (601, 270): [248  88  30]\n",
            "Point 7: RGB values at (597, 285): [246  82  11]\n",
            "Point 8: RGB values at (565, 294): [241  83  12]\n",
            "Point 9: RGB values at (570, 265): [250 184 158]\n",
            "Point 10: RGB values at (589, 299): [242  85  14]\n",
            "Point 11: RGB values at (606, 292): [247  83  12]\n",
            "Point 12: RGB values at (623, 275): [244  81  16]\n",
            "Point 13: RGB values at (621, 280): [247  82  14]\n",
            "Point 14: RGB values at (626, 290): [247  84  17]\n",
            "Point 15: RGB values at (640, 282): [242  75   4]\n",
            "Point 16: RGB values at (635, 261): [191  86  31]\n",
            "Point 17: RGB values at (662, 261): [253  75   1]\n",
            "Point 18: RGB values at (655, 270): [255  78   4]\n",
            "Point 19: RGB values at (657, 285): [239  75   4]\n",
            "Point 20: RGB values at (667, 275): [245  74   5]\n",
            "Point 1: RGB values at (524, 302): [207 177 179]\n",
            "Point 2: RGB values at (524, 319): [208 208 216]\n",
            "Point 3: RGB values at (531, 316): [223 219 242]\n",
            "Point 4: RGB values at (543, 316): [228 225 244]\n",
            "Point 5: RGB values at (563, 319): [228 227 235]\n",
            "Point 6: RGB values at (546, 326): [219 218 232]\n",
            "Point 7: RGB values at (555, 328): [228 228 238]\n",
            "Point 8: RGB values at (575, 328): [218 218 220]\n",
            "Point 9: RGB values at (575, 311): [228 222 234]\n",
            "Point 10: RGB values at (604, 304): [212  93  51]\n",
            "Point 11: RGB values at (611, 314): [116 129 137]\n",
            "Point 12: RGB values at (606, 326): [ 97  93 108]\n",
            "Point 13: RGB values at (628, 331): [222 224 236]\n",
            "Point 14: RGB values at (628, 316): [219 215 230]\n",
            "Point 15: RGB values at (640, 316): [228 226 248]\n",
            "Point 16: RGB values at (640, 302): [255 201 176]\n",
            "Point 17: RGB values at (657, 302): [215 211 228]\n",
            "Point 18: RGB values at (657, 314): [221 218 237]\n",
            "Point 19: RGB values at (650, 323): [223 222 240]\n",
            "Point 20: RGB values at (659, 328): [214 213 231]\n",
            "Point 1: RGB values at (519, 343): [27 92 70]\n",
            "Point 2: RGB values at (529, 348): [29 97 72]\n",
            "Point 3: RGB values at (529, 362): [29 99 71]\n",
            "Point 4: RGB values at (519, 362): [ 31 101  73]\n",
            "Point 5: RGB values at (548, 362): [28 96 71]\n",
            "Point 6: RGB values at (548, 348): [ 35 108  81]\n",
            "Point 7: RGB values at (558, 355): [26 99 72]\n",
            "Point 8: RGB values at (575, 357): [ 34 104  78]\n",
            "Point 9: RGB values at (589, 350): [ 32 101  73]\n",
            "Point 10: RGB values at (604, 360): [26 91 67]\n",
            "Point 11: RGB values at (623, 362): [22 88 61]\n",
            "Point 12: RGB values at (601, 362): [26 92 65]\n",
            "Point 13: RGB values at (640, 345): [28 97 69]\n",
            "Point 14: RGB values at (650, 357): [25 89 63]\n",
            "Point 15: RGB values at (662, 360): [20 82 57]\n",
            "Point 16: RGB values at (664, 348): [22 85 58]\n",
            "Point 17: RGB values at (606, 348): [33 99 72]\n",
            "Point 18: RGB values at (621, 348): [26 95 67]\n",
            "Point 19: RGB values at (638, 367): [24 88 62]\n",
            "Point 20: RGB values at (580, 367): [27 98 66]\n"
          ]
        }
      ],
      "source": [
        "##-----------------------------------------------------------------\n",
        "## Step4: fill the blanks for Selected points from saffron strip\n",
        "pts_saffron = select_points(img, \"Select Points on Saffron Strip\")\n",
        "## Step5: fill the blanks for Selected points from white strip)\n",
        "pts_white = select_points(img, \"Select Points on White Strip\")\n",
        "## Step6: fill the blanks for Selected points from green strip\n",
        "pts_green = select_points(img, \"Select Points on Green Strip\")\n",
        "##-----------------------------------------------------------------"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "owowgC532sNp"
      },
      "outputs": [],
      "source": [
        "# Convert RGB values to Lab color space\n",
        "def rgb_to_lab(rgb):\n",
        "    return cv2.cvtColor(np.uint8([[rgb]]), cv2.COLOR_RGB2Lab)[0][0]\n",
        "\n",
        "saffron_lab = np.array([rgb_to_lab(rgb) for _, _, rgb in pts_saffron])\n",
        "white_lab = np.array([rgb_to_lab(rgb) for _, _, rgb in pts_white])\n",
        "green_lab = np.array([rgb_to_lab(rgb) for _, _, rgb in pts_green])\n",
        "\n",
        "## Step7: Extract a* and b* components from Lab color space\n",
        "a_features = np.hstack((saffron_lab[:, 1], white_lab[:, 1], green_lab[:, 1]))\n",
        "b_features = np.hstack((saffron_lab[:, 2], white_lab[:, 2], green_lab[:, 2]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SSleC0sx2sNp",
        "outputId": "d50b1533-ada2-4120-eca6-e14530a08a58"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearDiscriminantAnalysis()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearDiscriminantAnalysis</label><div class=\"sk-toggleable__content\"><pre>LinearDiscriminantAnalysis()</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "LinearDiscriminantAnalysis()"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Map class labels to numeric values\n",
        "%matplotlib inline\n",
        "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n",
        "class_mapping = {'Saffron': 0, 'White': 1, 'Green': 2}\n",
        "y = np.array([class_mapping[label] for label in ['Saffron'] * Number_of_points + ['White'] * Number_of_points + ['Green'] * Number_of_points])\n",
        "\n",
        "plt.figure()\n",
        "plt.scatter(a_features[:Number_of_points], b_features[:Number_of_points], c='b', marker='o', s=50, label='Saffron')\n",
        "plt.scatter(a_features[Number_of_points:2*Number_of_points], b_features[Number_of_points:2*Number_of_points], c='g', marker='^', s=50, label='White')\n",
        "plt.scatter(a_features[2*Number_of_points:], b_features[2*Number_of_points:], c='r', marker='*', s=50, label='Green')\n",
        "plt.legend(['Saffron', 'White', 'Green'], loc='best')\n",
        "plt.xlabel('a* (Green-Red)')  ## Provide x label\n",
        "plt.ylabel('b* (Blue-Yellow)') ## Provide y label\n",
        "plt.title('Scatter plot of a* and b* components for Indian Flag Colors') ## Provide title\n",
        "plt.grid()\n",
        "plt.show()\n",
        "\n",
        "##------------------------------------------------------------\n",
        "# Step 8: Perform LDA analysis using LinearDiscriminantAnalysis() and lda.fit()\n",
        "\n",
        "X = np.column_stack((a_features, b_features))\n",
        "\n",
        "lda =LinearDiscriminantAnalysis()\n",
        "lda.fit(X, y)\n",
        "##-----------------------------------------------------------\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9HZzKaYy2sNq",
        "outputId": "55b2fd4f-17be-4a30-fc73-8bc7ef34c16d"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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bBnEYrHa+omJidi0aRO++uorpfIff/wRffr0Qc2aNXH06FHcu3cP69evR9myZTFt2rQMj5/RcXLbw4cPERkZieDgYBQrVgwdOnRQel10oUOHDoiNjVXc2Z2IsofJDhGpdfLkSTRp0gRFihSBk5MTOnbsiCdPnii2e3h4oHPnzjh06BDu3buHVq1awdjYGEZG6r9W/vrrL5iYmKBhw4aKssuXL2PJkiXw9/eHv78/mjZtitKlS8Pb2xvTp0/HiRMnFHX9/PxQs2ZNbN68GWXKlIG5uTkEQUBsbCy++eYbODs7w87ODi1atMDt27eVjn3s2DHUqVMHFhYWKFOmDObMmYPU1FTFdpFIhI0bN6Jbt26wsrJC+fLlcfToUY1eJ2dnZ7i6usLLywszZsxAbGwsrly5otj+999/o3379rCxsYGLiwsGDRqEf//9V7H98+fPGDx4MGxsbODm5qb2ztfGxsZo3749du/erVFMRKSMyQ4RqfX582eMHz8e165dw9mzZ2FkZIRu3bopTqV06NABp06dwunTp3HixAn88ssvGDt2LIyNjdW2d/78edStW1epbPfu3bCxscGoUaPU7iMSiZSeP378GPv27cPBgwcRFhamiCMqKgonTpzAjRs3ULt2bbRs2RIfPnwAAJw6dQoDBw7E999/j7///hvr1q3D1q1bMX/+fKW258yZg969e+POnTto3749BgwYoGhDEwkJCdiyZQsAwNTUFAAQGRkJb29v1KxZE9evX8fJkyfx9u1b9O7dW7HfpEmTEBQUhEOHDuH06dMIDg7GjRs3VNqvV68eLly4oHE8RJRGju7jTkSFRnR0tABAuHv3riAIgvDXX38JDRo0EL7//nuhZ8+eQpMmTYQVK1YIqampavfv0qWLMGzYMKWytm3bCtWrV1cqW7ZsmWBtba14fPz4URAEQZg9e7ZgamoqREdHK+qePXtWsLOzE5KSkpTaKFu2rLBu3TpBEAShadOmwoIFC5S279ixQ3Bzc1M8ByDMmDFD8Tw+Pl4QiUTCX3/9leHrERQUJABQxCkSiQQAQp06dYSUlBRBEARh5syZgq+vr9J+L1++FAAIDx8+FD59+iSYmZkJe/bsUWx///69YGlpKfzwww9K+x05ckQwMjISJBJJhjERkXoc2SEitZ48eYL+/fujTJkysLOzQ+nSpQEAL168AABERETgyJEj6NatG6pWrYqzZ89CLBZnOIk2MTERFhYWKuXpR2+GDRuGsLAwrFu3Dp8/f4YgCIptnp6eKFasmOL5jRs3EB8fDycnJ9jY2CgeERERilNuN27cwNy5c5W2f/3114iMjERCQoKirerVqyv+b21tDVtbW8Xcm6pVqyr2bdeunVK8Fy5cwM2bN7F79254enpi69atipGdGzduICgoSOnYlSpVUry+T548QUpKitKpPUdHR1SsWFHldbK0tIRUKkVycrLa15eIMmaS1wEQUf7UqVMneHh4YMOGDXB3d4dUKkW1atWQkpICAPj2228ByOakAICZmRkmTpyYYXtFixZFTEyMUln58uUREhICsVisSBCKFCmCIkWK4NWrVyptWFtbKz2XSqVwc3NDcHCwSt0iRYoo6syZMwfdu3dXqZM2+ZIfX04kEikStxMnTigmRFtaWirVK126NIoUKYIKFSogKSkJ3bp1Q3h4OMzNzSGVStGpUycsXrxY5dhubm74559/VMoz8uHDB1hZWakcn4iyxpEdIlLx/v173L9/HzNmzEDLli1RuXJllURFrnnz5hpdel6rVi1FYiTXr18/xMfHY/Xq1VrFWbt2bURFRcHExATlypVTehQtWlRR5+HDhyrby5Url+Fk6vQ8PT0V+xQvXjzDeoMGDYJUKlX0p3bt2rh37x5KlSqlcmxra2uUK1cOpqamuHz5sqKNmJgYPHr0SKXt8PBw1K5dOzsvDxH9H5MdIlLh4OAAJycnrF+/Ho8fP0ZgYCDGjx+fozbbtGmDe/fuKSVNDRs2xIQJEzBhwgSMHz8eISEheP78OS5fvoxNmzZBJBJlmpC0atUKDRs2RNeuXXHq1Ck8e/YMoaGhmDFjBq5fvw4AmDVrFrZv3w4/Pz/cu3cP9+/fx969ezFjxowc9UcdIyMjjB07FosWLUJCQgJGjx6NDx8+oF+/frh69SqePn2K06dPY9iwYZBIJLCxscHw4cMxadIknD17FuHh4Rg6dKjaPl+4cAG+vr46j5moMGCyQ0QqjIyMsGfPHty4cQPVqlXDuHHjsHTp0hy16eXlhbp162Lfvn1K5T///DN27dqFW7duoWPHjihfvjx69eoFqVSKS5cuwc7OLsM2RSIRTpw4gWbNmmHYsGGoUKEC+vbti2fPnsHFxQWALMk6fvw4AgIC8MUXX6BBgwbw9/eHp6dnjvqTkWHDhkEsFmPVqlVwd3fHxYsXIZFI0KZNG1SrVg0//PAD7O3tFQnN0qVL0axZM3Tu3BmtWrVCkyZNUKdOHaU2X79+jdDQUHz55Zd6iZnI0ImEtLP/iIj06MSJE5g4cSLCw8M1PoVEssvTY2NjsX79+rwOhahA4gRlIso17du3xz///IPXr1/Dw8Mjr8MpMJydnTOd/E1EmePIDhERERk0jiMTERGRQWOyQ0RERAaNyQ4REREZNCY7REREZNCY7BAREZFBY7JDREREBo3JDhERERk0JjtERERk0JjsEBERkUH7H59h0BDO+coWAAAAAElFTkSuQmCC",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot LDA boundaries\n",
        "plt.figure()\n",
        "plt.scatter(a_features[:Number_of_points], b_features[:Number_of_points], c='b', marker='o', s=50, label='Saffron')\n",
        "plt.scatter(a_features[Number_of_points:2*Number_of_points], b_features[Number_of_points:2*Number_of_points], c='g', marker='^', s=50, label='White')\n",
        "plt.scatter(a_features[2*Number_of_points:], b_features[2*Number_of_points:], c='r', marker='*', s=50, label='Green')\n",
        "\n",
        "plt.xlabel('a* (Green-Red)')  ## Provide x label\n",
        "plt.ylabel('b* (Blue-Yellow)') ## Provide y label\n",
        "plt.title('LDA boundaries (linear model) for Colors of the Indian Flag')\n",
        "\n",
        "# Plot the decision boundaries\n",
        "ax = plt.gca()\n",
        "xlim = ax.get_xlim()\n",
        "ylim = ax.get_ylim()\n",
        "\n",
        "xx, yy = np.meshgrid(np.linspace(xlim[0], xlim[1], 100), np.linspace(ylim[0], ylim[1], 100))\n",
        "Z = lda.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "Z = Z.reshape(xx.shape)\n",
        "\n",
        "plt.contour(xx, yy, Z, colors='k', linewidths=2, linestyles='solid')\n",
        "plt.legend(loc='best')\n",
        "plt.grid()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6feGF5Vt2sNq"
      },
      "source": [
        "## Report:\n",
        "\n",
        "## Answer the following questions within your report:\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4hnIy1Si2sNq"
      },
      "source": [
        "### 1.\tWhat are the key assumptions underlying LDA, and how do these assumptions influence the model's performance?\n",
        "LDA assumes a linear relationship between features and classes, meaning LDA can draw a straight line or a decision boundary that separates the data points.\n",
        "Each class has the same covariance matrix. The input dataset has a Gaussian distribution, where plotting the data points gives a bell-shaped curve.\n",
        "LDA works effectively when the assumptions aren't violated. if the data is not normally distributed or if the covariance matrices are very different, LDA might not find the optimal separating boundaries. Non-linear data might require non-linear methods like Kernel LDA or other classification techniques.\n",
        "LDA is moderately robust toward violations of the assumption of multivariate normal distribution, but is very sensitive to violations of the assumption of a common covariance matrix for the groups. Quadratic DA can be used when the covariance matrices of the groups are known to differ.\n",
        "But in some cases even if the data are very non Gaussian or class covariances are very different, the LDA axis will probably still yield some discriminability. However, the cut-point on this axis (separating two classes) given by LDA can be completely off. Optimizing it separately can substantially improve classification.\n",
        "Also The assumption of equal covariance matrices across classes can be unrealistic in cases like finance where volatility smiles and migration risk can lead to heteroscedasticity.\n",
        "### 2.\tWhat are the hyperparameters in LDA, and how do they affect the outcome of the model?\n",
        "- solver: The solver used for optimization. Options include 'svd', 'lsqr', and 'eigen'. 'svd' is generally preferred for high-dimensional data.\n",
        "- shrinkage: Used for regularization, particularly when the number of samples is small compared to the number of features. It adds a penalty to the covariance matrix estimation. Can be 'auto' or a float between 0 and 1.\n",
        "- n_components: This parameter specifies the number of components (<= n_classes - 1) for dimensionality reduction.\n",
        "The solver can affect the computational efficiency and stability of the solution. Shrinkage, or regularization, offers an insight into how covariance matrices are adjusted, especially when a covariance matrix is either singular or poorly estimated. shrinkage can improve generalization performance by reducing overfitting, especially with limited data. n_components determines the number of dimensions to reduce the data to, which can impact the model's ability to discriminate between classes.\n",
        "### 3.\tWhat methods can be used to assess an LDA model's effectiveness in terms of separation of topics and the coherence of generated topics?\n",
        "Fisher’s criterion measures the ratio of between-class scatter to within-class scatter. A higher Fisher score indicates better separation between classes.\n",
        "\"coherence\" refers to how interpretable and meaningful the discriminant axes (projections) are. Since LDA is a supervised method, coherence is often evaluated based on how well the projected features align with the class labels. We could use eigenvalue analysis assess the meaningfulness of the discriminant axes.\n",
        "### 4.\tWhat are some common challenges or limitations associated with LDA, and how can they be addressed or mitigated?\n",
        "LDA produces at most C-1 projections i.e., it reduces original features dimensionality to at most C-1 dimensions. Thus, if the classification error after LDA is high and more features are needed, some other method must be employed to provide those additional features. Another limitaion of LDA  is that the classes may not be linearly separable. We can use Kernels for this type of data.\n",
        "### 5. What practical applications does this assignment have in real-world situations, and what benefits does it offer in those specific scenarios?\n",
        "Some real world applications of LDA :\n",
        "- Spam Detection - Select the “optimal” features from hundreds of features to detect spam emails\n",
        "- Disease Classification on patients’ data - Classifying diseases as mild, moderate, or severe using various parameters of patient health\n",
        "- Image Recognition: Classifying an object or face based on extracted features.\n",
        "In spam detection, LDA reduces feature set while preserving discriminative power\n",
        "In Disease Classification: Its effective for multi-class problems and provides interpretable results also reduces dimensionality of health parameters\n",
        "In image Recognition: it extracts most discriminative features, improves recognition accuracy and reduces computational complexity"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2LtNjzK52sNr"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DnWHrQl92sNr"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.4"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}